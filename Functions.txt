1. OpenSCManager:			서비스 컨트롤 관리자(SCM) 핸들을 열어 서비스 목록을 관리한다.
2. EnumServicesStatusEx:	실행중인 서비스 목록을 조회하는 함수이며 특정 서비스의 상태를 확인할 수 있다.
3. OpenSerivce:				특정 서비스를 열어 정보를 가져오거나 조작할 수 있도록 한다
4. QueryServiceConfig:		서비스의 설정 정보(설명, 실행 파일 경로 등)를 가져오는 함수
5. CloseServiceHandle:		열린 서비스 핸들을 닫아 리소스를 해제
6. EnumProcesses:				현재 실행중인 프로세스 목록을 조회하는 함수
7. OpenProcess:				특정 프로세스를 핸들링하는 함수이며 프로세스의 정보를 조사할 수 있다.
8. GetModuleBaseName:		특정 프로세스의 이름을 가져온다(프로세스 명만 반환)
9. GetProcessImageFileName:	프로세스의 실행 파일 전체 경로를 가져옴

일단, GetProcessList 함수부터 보자.
GetProcessList의 내부에사 EnumProcess 함수를 호출하고 있다.

EnumProcesses 함수는 각 프로세스 개체에 대한 식별자를 조사할 때 사용된다.
원형은 다음과 같다.

BOOL EnumProcesses(
	[out] DWORD   *lpidProcess,
	[in]  DWORD   cb,
	[out] LPDWORD lpcbNeeded
);

첫 번째 인수는 프로세스 식별자(PID) 목록을 반환받을 버퍼를 전달하면 된다.
두 번째 인수는 첫 번째 인수로 전달한 버퍼의 크기를 바이트 단위로 전달한다.
세 번째 인수는 실제 기록된 프로세스 식별자 목록의 크기인데 필요한 버퍼의 크기를 조사할 때도 사용된다.

함수가 성공하면 반환 값이 0이 아니며 함수가 실패하면 반환 값이 0이다.
EnumProcesses 함수를 호출하는 시점에서 프로세스가 얼마나 실행되고 있을지 예측하기 어렵다.
때문에 적당히 큰 크기의 배열을 선언하여 넘기는 것이 좋다.

열거된 프로세스의 수를 확인하려면 세 번째 인수로 전달된 실제 목록의 크기를 sizeof(DWORD)로 나누면 된다.
반환받은 식별자 목록을 이용해서 OpenProcess 함수를 호출하면 프로세스의 핸들을 가져올 수 있다.

OpenProcess 함수는 단순히 프로세스의 핸들을 받아오며 원형은 다음과 같다.

HANDLE OpenProcess(
	[in] DWORD dwDesiredAccess,
	[in] BOOL  bInheritHandle,
	[in] DWORD dwProcessId
);

첫 번째 인수는 프로세스에 대한 액세스 권한을 지정하는데 이 액세스 권한은 프로세스의 보안 설명자(Security Descriptor)로 확인할 수 있다. 프로세스의 보안 설명자를 조사하려면 GetSecurityInfo 함수를 호출해야 한다. 수정도 가능한데 SetSecurityInfo 함수를 호출하면 보안 설명자를 변경할 수 있다.

이 함수들은 나중에 차차 알아보기로 하고 일단 관리자 권한을 가지고 있다면 거의 모든 프로세스에 접근할 수 있다고 보면 된다.

프로세스는 보안 개체(커널 개체)에 해당되며 표준 액세스 권한을 가지는데 이 권한들은 winnt.h에 매크로 상수로 정의되어 있다.

1. DELETE:			프로세스를 삭제할 수 있는 권한을 받아온다.
2. READ_CONTROL:	SACL(시스템 액세스 제어 목록)의 정보를 포함하지 않고 개체의 보안 설명자를 읽어온다.
3. WRITE_DAC:		개체의 보안 설명자에서 DACL(임의 액세스 제어 목록)을 수정할 수 있는 권한을 받아온다.
4. WRITE_OWNER:		개체의 보안 설명자에서 소유자를 변경할 수 있는 권한을 받아온다.
5. SYNCHRONIZE:		프로세스를 기다려야 하는 특수한 경우가 있을 수 있다. 이때 프로세스를 WaitForSingleObject 등의 대기 함수로 기다릴 수 있는데 이런 동작이 필요할 때 설정해야 하는 옵션이다. 

미리 정의된 조합 값도 있는데 다음과 같다.

1. STANDARD_RIGHTS_ALL:			위 모든 상수값의 조합
2. STANDARD_RIGHTS_EXECUTE:		실행할 수 있는 권한을 요청하는데 과거에는 옵션이 여러개로 나뉘었으나 현재는 READ_CONTROL의 값과 같다.
3. STANDARD_RIGHT_READ:			이것도 마찬가지로 READ_CONTROL과 같다.
4. STANDARD_RIGHTS_REQUIRED:	DELETE, READ_CONTROL, WRITE_DAC, WRITE_OWNER 액세스가 결합된 조합 값이다.
5. STANDARD_RIGHTS_WRITE:		이 값도 현재는 READ_CONTROL과 같은 값을 가진다.

보안 개체는 위와 같은 조합 값들을 사용하여 액세스 권한을 설정한다.
통용되는 값이 위에 나와있는 값들인데 프로세스 액세스 권한을 따로 정의해두기도 했다.

뭘 사용하건 상관없으나 동작에 필요한 값만 조합하는 것이 보안상 옳다.
목록이 굉장히 긴데, 자주 사용되는 값만 살펴보자.

1. PROCESS_ALL_ACCESS(STANDARD_RIGHTS_REQUIRED(0x000F0000L) | SYNCHRONIZE(0x00100000L) | 0xFFFF) : 모든 권한을 요청한다.
2. PROCESS_CREATE_PROCESS(0x0080): 부모 프로세스에서 자식 프로세스를 생성할 때 요청하는 액세스 권한이다.
3. PROCESS_CREATE_THREAD(0x0002): 프로세스에서 스레드를 만들 때 필요한 권한이다.
4. PROCESS_DUP_HANDLE(0x0040):	DuplicateHandle 함수를 사용하여 핸들을 복제할 때 필요한 권한이다.
5. PROCESS_QUERY_INFORMATION(0x0400): OpenProcessToken 함수를 사용할 때 필요한 권한이며 프로세스의 우선순위, 메모리 사용량 및 할당 정보, 실행 파일의 경로, 환경 변수, 보안 속성 등을 조사할 때 지정해야 한다. 일반적으로 관리자가 이 값을 지정하며 프로세스의 전반적인 속성을 조회할 때 사용된다.
6. PROCESS_QUERY_LIMITED_INFORMATION(0x1000): 위 5번의 값보다 프로세스에 대한 특정 정보를 검색하는데 필요하다. GetExitCodeProcess, GetPriorityClass, IsProcessInJob, QueryFullProcessImageName 등의 함수를 사용하기 위해 설정되어야 한다. PROCESS_QUERY_INFORMATION 액세스 권한이 있는 핸들은 PROCESS_QUERY_LIMITED_INFORMATION이 자동으로 부여된다. 관리자가 아닌 일반 관계자에게 프로세스에 대한 정보를 제한적으로 제공해야할 때 사용된다고 이해하면 쉽다.
7. ROCESS_SET_INFORMATION(0x0200): SetPriorityClass 함수를 호출할 때 필요하며 우선 순위 클래스와 같이 프로세스에 대한 특정 정보를 설정할 때 지정해야 한다.
8. PROCESS_SET_QUOTA(0x0100): SetProcessWorkingSetSize 함수를 사용하여 프로세스의 최대 메모리를 제한을 설정할 때 필요하다
9. PROCESS_SUSPEND_RESUME(0x0800): 프로세스를 일시 중단하거나 다시 시작할 때 필요하다.
10. PROCESS_TERMINATE(0x0001): TerminateProcess 함수를 사용하여 프로세스를 종료할 때 필요한 권한이다.
11. PROCESS_VM_OPERATION(0x0008): 프로세스의 주소 공간에서 작업(실행 및 종료 등)을 수행하는데 필요한 권한이며 VirtualProtectEx 함수나 WriteProcessMemory 함수를 사용할 때 지정해야 한다. 일반적인 수준의 함수는 아니므로 따로 설명하지 않기로 한다.
12. PROCESS_VM_READ(0x0010): ReadProcessMemory 함수를 사용하여 프로세스가 가진 메모리 정보를 읽을 때 필요한 권한이다.
13. PROCESS_VM_WRITE(0x0020): WriteProcessMemory 함수를 사용하여 프로세스의 메모리에 정보를 수정하거나 작성할 때 필요하다. 인젝션 기법에 활용되는데 특정 프로세스가 가지는 dll 목록을 수정하는 등의 동작을 할 때 필요한 권한이다. 
14. SYNCHRONIZE(0x00100000L): 대기 함수를 사용하여 프로세스가 종료되기를 기다릴 때 필요하다.


이런 권한들도 보호된 프로세스(운영체제에 의해 실행되는 서비스 프로그램 등)를 대상으로는 요청할 수 없다.
lasss.exe나 audiodg.exe 등의 프로그램 등이 이에 해당된다.

두 번째 인수는 해당 프로세스가 생성하는 자식 프로세스에게 핸들을 상속시킬 때 사용된다.
진리값을 이용하는데 TRUE로 설정하면 핸들을 상속하고 FALSE면 핸들을 상속하지 않는다.
여기서 말하는 핸들은 현재 프로세스가 갖는 모든 핸들을 말하는데 이것도 각 개체별로 허용되는게 있고 안되는게 있다.
이에 대해서는 설명을 추가하지 않기로 한다.

세 번째 인수는 열고자 하는 프로세스의 식별자 값이다.
EnumProcesses 함수로 얻어온 프로세스의 식별자 목록에서 핸들을 얻고자 하는 식별자를 전달하면 된다.
지정된 프로세스가 시스템 유휴 프로세스일 경우 함수가 실패하며 GetLastError 함수의 리턴 값이 ERROR_INVALID_PARAMETER로 지정된다. 지정한 프로세스가 시스템 프로세스이거나 클라이언트 서버 Run-Time 하위 시스템(CSRSS) 프로세스 중 하나일 경우에도 함수가 실패한다. 이때는 GetLastError 함수의 리턴 값이 ERROR_ACCESS_DENIED가 된다.

반환 값은 프로세스의 핸들이며 함수가 실패하면 NULL을 반환한다.
핸들을 다 사용하고 난 후에는 CloseHandle을 이용하여 핸들을 닫아 리소스를 정리해야 한다.


다음은 GetModuleBaseName에 대해 알아보자.
지정된 모듈의 기본 이름을 검색하는데 곧, 프로세스 목록에 보이는 이름이라고 생각하면 된다.
원형은 다음과 같다.

DWORD GetModuleBaseNameW(
	[in]           HANDLE  hProcess,
	[in, optional] HMODULE hModule,
	[out]          LPWSTR  lpBaseName,
	[in]           DWORD   nSize
);

첫 번째 인수는 모듈을 포함하는 프로세스에 대한 핸들이다.
함수가 성공하려면 PROCESS_QUERY_INFORMATION 및 PROCESS_VM_READ 액세스 권한이 설정된 핸들이어야 한다.

두 번째 인수는 모듈에 대한 핸들인데 이 인수로 NULL을 전달하면 호출 프로세스를 만들 때 사용된 파일의 이름을 반환한다. 즉, 파일 이름을 반환한다.

세 번째 인수는 조사한 이름을 받을 출력용 인수이다. 네 번째 인수인 nSize에 지정한 최대 문자 길이보다 받아온 모듈의 이름이 길면 문자가 잘린다.

네 번째 인수는 문자의 길이이다.

반환 값은 함수가 성공하면 버퍼에 복사된 실제 문자열의 길이이고 실패하면 0이다.

이 함수는 사실 지금 만들고 있는 프로그램에 사용할 수 있도록 설계되었다.
즉, 주로 다른 프로세스에서 모듈 정보를 추출해야 하는 디버거 및 유사한 애플리케이션에서 사용하도록 설계되었으며 대상 프로세스의 모듈 목록이 손상되었거나 아직 초기화되지 않은 경우, 또는 DLL이 로드되거나 언로드되어 함수 호출 중에 모듈 목록이 변경되는 경우에는 함수가 실패하거나 잘못된 정보를 반환할 수 있다.

이 함수로 조사되지 않는 함수의 경우 시스템 프로세스일 가능성이 크며 이때에는 GetProcessImageFileName이나 GetModuleFileName 함수를 사용한다. 현재 프로세스가 아닌 다른 프로세스에 대한 모듈 이름을 검색하려면 반드시 GetProcessImageFileName 함수를 사용해야 하며 주어진 문자열에서 마지막으로 발견된 문자 지점을 반환하는 strrchr 함수를 사용하면 쉽게 모듈 이름을 추출할 수 있다.

좀 더 업그레이드 된 함수도 존재하는데 QueryFullProcessImageName이라는 함수이다.
이 함수는 지정된 프로세스에 대한 실행 파일의 전체 이름을 검색한다.
원형은 다음과 같다.

BOOL QueryFullProcessImageNameA(
	[in]      HANDLE hProcess,
	[in]      DWORD  dwFlags,
	[out]     LPSTR  lpExeName,
	[in, out] PDWORD lpdwSize
);

첫 번째 인수는 프로세스에 대한 핸들인데 반드시 PROCESS_QUERY_INFORMATION(LIMITED 포함) 권한을 가져야 한다.

두 번째 인수는 이름을 구할 때 어떻게 구해와야 하는지 설정하는 옵션이다.
다음 값 중 하나일 수 있다.
1. 0: 이름을 구할 때 Win32 경로 형식을 사용해야 한다.
2. PROCESS_NAME_NATIVE (0x00000001): 이름을 구할 때 기본 시스템 경로 형식을 사용해야 한다.

세 번째 인수는 실행 파일이 있는 경로를 반환받는 출력용 인수이다. 함수가 성공하면 NULL로 종료되는 문자열이 반환된다.

네 번째 인수는 입출력 인수인데 버퍼의 크기(문자 길이)를 전달하거나 반환된 문자열의 길이가 반환된다.

함수가 성공하면 0이 아닌 값이 리턴되고 실패하면 0이 반환된다.

이번엔 GetServiceList 함수를 보자.
선두에서 서비스 제어 관리자를 여는 OpenSCManager 함수를 호출한다.

OpenSCManager 함수는 지정한 컴퓨터의 서비스 제어 관리자를 열고 SCM이 관리하는 데이터베이스를 가져온다.

원형은 다음과 같다.
SC_HANDLE OpenSCManagerW(
	[in, optional] LPCWSTR lpMachineName,
	[in, optional] LPCWSTR lpDatabaseName,
	[in]           DWORD   dwDesiredAccess
);

첫 번째 인수는 대상 컴퓨터의 이름이다. NULL이거나 빈 문자열일 경우 로컬 컴퓨터의 서비스 제어 관리자를 연다.

두 번째 인수는 데이터베이스의 이름인데 이 값도 일반적으로 NULL을 전달한다. NULL일 때 기본값으로 SERVICES_ACTIVE_DATABASE 데이터베이스가 열린다.

세 번째 인수는 서비스 제어 관리자에 대한 액세스 권한이다. 액세스 권한 목록은 다음과 같다.

1. SC_MANAGER_ALL_ACCESS(0xF003F): 아래 설명된 모든 액세스 권한의 조합이다. STANDARD_RIGHTS_REQUIRED도 포함한다.
2. SC_MANAGER_CREATE_SERVICE(0x0002): 서비스 개체를 만들고 데이터베이스에 추가할 때 필요한 권한이다. CreateService 함수 호출시 필요하다.
3. SC_MANAGER_CONNECT(0x0001): 서비스 제어 관리자에 연결할 때 필요한 권한이다.
4. SC_MANAGER_ENUMERATE_SERVICE(0x0004): EnumServicesStatus 또는 EnumServicesStatusEx 함수를 호출하여 데이터베이스에 있는 서비스를 나열하는 데 필요하다. 서비스를 만들거나 삭제할 때 알림을 받으려면 NotifyServiceStatusChange 함수를 호출해야 한다.
5. SC_MANAGER_LOCK(0x0008): LockServiceDatabase 함수를 호출하여 데이터베이스에 대한 잠금을 설정할 때 필요한 권한이다.
6. SC_MANAGER_MODIFY_BOOT_CONFIG(0x0020): NotifyBootConfigStatus 함수를 호출할 때 필요하다.
7. SC_MANAGER_QUERY_LOCK_STATUS(0x0010): QueryServiceLockStatus 함수를 호출하여 데이터베이스에 대한 잠금 상태 정보를 검색할 때 필요한 권한이다.

일반적으로 사용되는 액세스 권한을 조합한 매크로 상수도 정의되어 있는데 다음과 같다.
1. GENERIC_READ: STANDARD_RIGHTS_READ | SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_QUERY_LOCK_STATUS
2. GENERIC_WRITE: STANDARD_RIGHTS_WRITE | SC_MANAGER_CREATE_SERVICE | SC_MANAGER_MODIFY_BOOT_CONFIG
3. GENERIC_EXECUTE: STANDARD_RIGHTS_EXECUTE | SC_MANAGER_CONNECT | SC_MANAGER_LOCK
4. GENERIC_ALL: SC_MANAGER_ALL_ACCESS

계정에 따라 기본적으로 갖게 되는 액세스 권한이 있으며 로컬 인증된 사용자의 경우 SC_MANAGER_CONNECT | SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_QUERY_LOCK_STATUS | STANDARD_RIGHTS_READ 권한을 갖는다.
로컬이 아닌 외부(또는 원격)의 사용자는 SC_MANAGER_CONNECT 권한만 가지며 로컬 시스템은 SC_MANAGER_CONNECT | SC_MANAGER_ENUMERATE_SERVICE | SC_MANAGER_MODIFY_BOOT_CONFIG | SC_MANAGER_QUERY_LOCK_STATUS | STANDARD_RIGHTS_READ 권한을 가진다. 관리자 계정은 당연히 SC_MANAGER_ALL_ACCESS 이다.

서비스 제어 관리자가 아닌 서비스에 대한 특정 액세스 권한도 있다.
1. SERVICE_ALL_ACCESS(0xF01FF): 하위의 모든 액세스 권한의 조합이다. 외에도 STANDARD_RIGHTS_REQUIRED 권한을 포함한다.
2. SERVICE_CHANGE_CONFIG(0x0002): 서비스 구성을 변경하려면 ChangeServiceConfig 또는 ChangeServiceConfig2 함수를 호출해야 한다. 위 함수들을 호출할 때 필요한 권한이며 이를 설정하면 해당 함수를 호출한 호출자에게 시스템이 실행하는 실행 파일을 변경할 수 있는 권한이 부여된다. 보통 관리자에만 부여하는 권한이다.
3. SERVICE_ENUMERATE_DEPENDENTS(0x0008): 서비스에 종속된 모든 서비스를 열거하려면 EnumDependentServices 함수를 호출해야 하는데 이때 사용된다.
4. SERVICE_INTERROGATE(0x0080): ControlService 함수를 호출하여 서비스에 해당 상태를 즉시 보고하도록 요청할 때 필요한 권한이다.
5. SERVICE_PAUSE_CONTINUE(0x0040): 서비스를 일시 중지하거나 다시 실행할 때 ControlService 함수를 호출해야 하는데 이때 필요한 권한이다.
6. SERVICE_QUERY_CONFIG(0x0001): QueryServiceConfig 함수를 호출하거나 QueryServiceConfig2 함수를 호출하여 서비스 구성을 조회할 때 필요한 권한이다.
7. SERVICE_QUERY_STATUS(0x0004): QueryServiceStatus 함수를 호출하거나 QueryServiceStatusEx함수를 호출하여 서비스 제어 관리자에게 서비스 상태를 열람할 수 있도록 요청할 때 필요한 권한이다. 서비스가 상태를 변경할 때 알림을 받으려면 NotifyServiceStatusChange 함수를 호출하는데 이때도 사용된다.
8. SERVICE_START(0x0010): 서비스를 시작할 때 필요하며 StartService 함수를 호출하기 위해 필요한 권한이다.
9. SERVICE_STOP(0x0020): 서비스를 중단할 때 필요하며 ControlService 함수를 호출하기 위해 필요한 권한이다.
10. SERVICE_USER_DEFINED_CONTROL(0x0100): ControlService 함수를 호출하여 사용자 정의 컨트롤 코드를 지정할 때 필요한 권한이다.


표준 액세스 권한도 있는데 이는 다음과 같다.
1. ACCESS_SYSTEM_SECURITY: QueryServiceObjectSecurity 함수를 호출하거나 SetServiceObjectSecurity 함수를 이용하여 SACL에 액세스할 때 필요하다. 이 액세스 권한을 가져오는 옳은 방법은 호출자의 현재 액세스 토큰에서 SE_SECURITY_NAME 권한을 설정하고 ACCESS_SYSTEM_SECURITY 액세스에 대한 핸들을 연 다음 권한을 사용하지 않도록 설정하는 것이다.
2. delete (0x10000): 서비스를 삭제할 때 필요한 권한이다. DeleteService 함수에서 이를 요구한다.
3. READ_CONTROL(0x20000): QueryServiceObjectSecurity 함수를 호출하여 서비스 개체의 보안 설명자를 조회할 때 필요하다.
4. WRITE_DAC(0x40000): SetServiceObjectSecurity 함수를 호출하여 서비스 개체의 보안 설명자의 DACL 멤버를 수정할 때 필요하다.
5. WRITE_OWNER(0x80000): SetServiceObjectSecurity 함수를 호출하여 서비스 개체의 보안 설명자의 소유자 및 그룹 멤버를 수정할 때 필요하다.


앞에서와 같이 일반적으로 사용되는 조합값을 매크로 상수로 정의해뒀다.
1. GENERIC_READ: STANDARD_RIGHTS_READ | SERVICE_QUERY_CONFIG | SERVICE_QUERY_STATUS | SERVICE_INTERROGATE | SERVICE_ENUMERATE_DEPENDENTS
2. GENERIC_WRITE: STANDARD_RIGHTS_WRITE | SERVICE_CHANGE_CONFIG
3. GENERIC_EXECUTE: STANDARD_RIGHTS_EXECUTE | SERVICE_START | SERVICE_STOP | SERVICE_PAUSE_CONTINUE | SERVICE_USER_DEFINED_CONTROL

SCM은 CreateService 함수에 의해 서비스가 설치될 때 서비스 개체의 보안 설명자를 만드는데 서비스 개체의 기본 보안 설명자는 다음의 액세스 권한을 부여한다.

1. 원격 인증된 사용자: 기본적으로 부여되지 않는다. windows Server 2003 SP1: SERVICE_USER_DEFINED_CONTROL, Windows Server 2003 및 Windows XP: 원격 인증된 사용자에 대한 액세스 권한은 로컬 인증된 사용자와 동일하다.
2. 로컬 인증된 사용자(LocalService 및 NetworkService 포함) : READ_CONTROL | SERVICE_ENUMERATE_DEPENDENTS | SERVICE_INTERROGATE | SERVICE_QUERY_CONFIG | SERVICE_QUERY_STATUS | SERVICE_USER_DEFINED_CONTROL
3. LocalSystem: READ_CONTROL | SERVICE_ENUMERATE_DEPENDENTS | SERVICE_INTERROGATE | SERVICE_PAUSE_CONTINUE | SERVICE_QUERY_CONFIG | SERVICE_QUERY_STATUS | SERVICE_START | SERVICE_STOP | SERVICE_USER_DEFINED_CONTROL
4. 관리자: DELETE | READ_CONTROL | SERVICE_ALL_ACCESS | WRITE_DAC | WRITE_OWNER

다시 코드로 돌아와서 GetServiceList 함수를 보면 단순히 개수를 조회하기 위해 SCM을 열기 때문에 세 번째 인수를 SC_MANAGER_ENUMERATE_SERVICE로 설정했다.

반환 값은 함수가 성공하면 서비스 제어 관리자 데이터베이스에 대한 핸들이며 실패시 NULL이다.
함수가 실패하면 오류 코드를 조사해서 반환한 값을 반드시 확인해봐야 한다.

다음 오류 코드는 SCM이 설정할 수 있는 오류 코드이며 다른 오류 코드는 SCM에서 호출하는 레지스트리 함수에서 설정할 수 있다.

1. ERROR_ACCESS_DENIED: 요청된 액세스가 거부되었습니다.
2. ERROR_DATABASE_DOES_NOT_EXIST: 지정한 데이터베이스가 없습니다.

다음은 EnumServicesStatusEx에 대해 알아보자.
이 함수는 지정된 서비스 제어 관리자 데이터베이스의 서비스를 열거한다. 각 서비스의 이름 및 상태가 지정된 정보 수준에 따라 추가 데이터와 함께 제공된다.

원형은 다음과 같다.
BOOL EnumServicesStatusExA(
	[in]                SC_HANDLE    hSCManager,
	[in]                SC_ENUM_TYPE InfoLevel,
	[in]                DWORD        dwServiceType,
	[in]                DWORD        dwServiceState,
	[out, optional]     LPBYTE       lpServices,
	[in]                DWORD        cbBufSize,
	[out]               LPDWORD      pcbBytesNeeded,
	[out]               LPDWORD      lpServicesReturned,
	[in, out, optional] LPDWORD      lpResumeHandle,
	[in, optional]      LPCSTR       pszGroupName
);

인수가 좀 많은데 다 중요하니 하나씩 알아보자.
첫 번째 인수는 서비스 제어 관리자 데이터베이스에 대한 핸들이다. 즉, OpenSCManager 함수에서 반환된 핸들을 전달한다. 이 함수를 이용하려면 SC_MANAGER_ENUMERATE_SERVICE 액세스 권한이 필요하며 앞에서 OpenSCManager를 호출할 때 세 번째 인수에 이미 지정해뒀다.

두 번째 인수는 바노한할 서비스의 특성이다. SC_ENUM_PROCESS_INFO를 전달하면 각 서비스에 대한 이름 및 서비스 상태 정보를 검색할 수 있다. lpServices 매개 변수는 ENUM_SERVICE_STATUS_PROCESS 구조체 정보를 전달받을 포인터인데 문자열까지 저장해야 하므로 충분히 커야 한다.

세 번째 인수는 열거할 서비스의 유형이며 다음과 같은 값들을 조합하여 사용할 수 있다.
1. SERVICE_DRIVER (0x0000000B): SERVICE_KERNEL_DRIVER 및 SERVICE_FILE_SYSTEM_DRIVER 유형의 서비스
2. SERVICE_FILE_SYSTEM_DRIVER (0x00000002): 파일 시스템 드라이버 서비스
3. SERVICE_KERNEL_DRIVER (0x00000001): 드라이버 서비스
4. SERVICE_WIN32 (0x00000030): SERVICE_WIN32_OWN_PROCESS 및 SERVICE_WIN32_SHARE_PROCESS 유형의 서비스
5. SERVICE_WIN32_OWN_PROCESS (0x00000010): 자체 프로세스에서 실행되는 서비스
6. SERVICE_WIN32_SHARE_PROCESS (0x00000020): 하나 이상의 다른 서비스와 프로세스를 공유하는 서비스 유형. 이 유형을 이해하려면 서비스 프로그램을 한 번쯤 접해봐야 한다. 서비스 프로그램에는 하나 이상의 서비스를 제공하기 위한 소스 코드가 포함되어 있다. 서비스 프로그램 그 자체만으로 필요한 동작을 수행할 수 있으면 SERVICE_WIN32_OWN_PROCESS로 지정하고, 다른 프로세스에서 정보를 전달받아 동작해야 하는 서비스 프로그램이라면 이 값을 지정하면 된다.

네 번째 인수는 열거할 서비스의 상태이다. 이 매개 변수는 다음 값 중 하나일 수 있다.
1. SERVICE_ACTIVE (0x00000001): SERVICE_START_PENDING, SERVICE_STOP_PENDING, SERVICE_RUNNING, SERVICE_CONTINUE_PENDING, SERVICE_PAUSE_PENDING 및 SERVICE_PAUSED 상태에 있는 서비스를 열거한다.
2. SERVICE_INACTIVE (0x00000002): SERVICE_STOPPED 상태에 있는 서비스를 열거합니다.
3. SERVICE_STATE_ALL (0x00000003): SERVICE_ACTIVE 상태와 SERVICE_INACTIVE 상태를 결합합니다.

다섯 번째 인수는 구해온 정보를 받을 포인터인데 두 번째 인수인 InfoLevel의 값에 따라 데이터 형식이 달라진다.
최대 256K의 크기를 가질 수 있으며 필요한 크기를 판별하려면 NULL을 지정하고 cbBufSize도 0을 지정해야 한다.
함수가 실패하고 GetLastError 함수를 호출하면 ERROR_MORE_DATA가 반환되는데 이때, pcbBytesNeeded 인수에 필요한 버퍼 크기가 전달된다. 참고로 Windows Server 2003, XP에서는 최대 크기가 64K로 제한된다.

여섯 번째 인수는 lpServices 인수가 가리키는 버퍼의 크기(바이트)이다.
일곱 번째 인수는 앞서 말했듯 버퍼 크기를 전달받기 위한 출력용 인수이다. 필요없으면 NULL로 지정한다.
여덟 번째 인수는 조사된 서비스 항목의 개수를 반환하는 인수이다.

아홉 번째 인수는 입출력/옵션 인수인데 서비스 목록을 나눠서 가져와야할 때 사용된다. 서비스가 너무 많을 경우 한 번 호출하는 것만으론 전체를 조사하지 못할 수 있다. 이때 이 인수를 사용하면 이전 호출에서 중단된 지점부터 다시 검색할 수 있다. 이 값은 처음 호출할 때 항상 NULL(0)로 지정해야 하며 이후 호출에서 이전 호출에서 반환된 값을 사용해  남은 서비스 목록을 이어서 검색할 수 있다. 이를 판단하려면 이 인수가 반환하는 값을 담을 출력용 변수를 전달해야 한다. 함수가 성공했는데 이 인수의 반환값이 0이라면 아직 가져오지 못한 데이터가 남아있다는 뜻이다. 이 값을 그대로 유지한채로 다시 함수를 호출하면 이어서 검색할 수 있다.

열 번째 인수는 특정 서비스 그룹에 속한 서비스만 나열할 때 사용된다. NULL로 설정하면 모든 서비스를 검색하며 특정 그룹의 이름을 문자열로 지정하면 그룹에 속한 서비스만 반환한다.

함수가 성공하면 반환 값은 0이 아닌 값이며 실패시 0을 반환한다.
오류 코드는 다음과 같다.

1. ERROR_ACCESS_DENIED: 핸들에 SC_MANAGER_ENUMERATE_SERVICE 액세스 권한이 없다.
2. ERROR_MORE_DATA: 버퍼가 너무 작다. pcbBytesNeeded 매개 변수에는 나머지 항목을 받는 데 필요한 바이트 수가 포함된다.
3. ERROR_INVALID_PARAMETER: 잘못된 매개 변수 값이 사용되었다.
4. ERROR_INVALID_HANDLE: 핸들이 유효하지 않다.
5. ERROR_INVALID_LEVEL: InfoLevel 매개 변수에 지원되지 않는 값이 포함되어 있다.
6. ERROR_SHUTDOWN_IN_PROGRESS: 시스템이 종료되고 있으며 함수를 호출할 수 없다.

호출자에게 서비스에 대한 SERVICE_QUERY_STATUS 액세스 권한이 없는 경우 해당 서비스는 클라이언트로 반환되는 서비스 목록에서 자동으로 생략된다.

DetectProcessChanges는 간단한 논리 구조로 프로세스의 실행과 종료를 탐지하는데 별로 어렵지 않으며 새로 알아야 할 api 함수도 없다.

넘어가서 GetServiceDescription 함수를 보자.
선두에서 OpenService 함수를 호출하는데 이 함수는 서비스 핸들을 반환한다.

SC_HANDLE OpenServiceW(
	[in] SC_HANDLE hSCManager,
	[in] LPCWSTR   lpServiceName,
	[in] DWORD     dwDesiredAccess
);

첫 번째 인수로 서비스 제어 관리자의 핸들을 전달한다.
두 번째 인수는 서비스의 이름을 전달하는데 CreateService 함수를 이용해서 생성할 때 lpServiceName으로 전달한 문자열을 그대로 사용한다. 서비스를 식별하기 위해 제공되는 애플리케이션, 즉 서비스 뷰어에서 표시하는 표시 이름이 아니다. 최대 256의 길이를 가지며 대/소문자를 구분하지 않는다. 또한 '/', '\' 문자를 포함할 수 없다.
세 번째 인수는 서비스에 대한 액세스 권한인데 이는 앞에서 이미 다뤘던 내용이다. 요청된 액세스 권한을 부여하기 전에 시스템은 서비스와 연결된 보안 설명자의 임의 액세스 제어 목록 DACL에서 이 함수를 호출한 프로세스의 액세스 토큰을 확인한다. 즉, 적당한 권한을 가졌냐 따져본다는 뜻이다.

함수가 성공하면 반환 값은 서비스 핸들이며 실패시 NULL이다.
GetLastError 함수를 호출하여 점검할 수 있는데 다음과 같은 값이 반환된다.
1. ERROR_ACCESS_DENIED: 핸들에 서비스에 대한 액세스 권한이 없다.
2. ERROR_INVALID_HANDLE:  지정한 핸들이 잘못되었다.
3. ERROR_INVALID_NAME: 지정한 서비스 이름이 잘못되었다.
4. ERROR_SERVICE_DOES_NOT_EXIST: 지정된 서비스가 없다.

얻어온 핸들은 반드시 닫아야 하며 CloseServiceHandle 함수를 호출해 닫으면 된다.
참고로 OperService 함수를 사용할 때 SC_MANAGER_CONNECT 권한 외에는 필요한 것이 없다.

이번엔 서비스의 구성 정보를 조회하는 함수를 알아보자.
QueryServiceConfig2라는 함수를 사용하여 서비스의 정보를 가져올 수 있는데 QueryServiceConfig 함수와 달리 구성 정보중 필요한 정보만 검색할 수 있다.

BOOL QueryServiceConfig2W(
	SC_HANDLE hService,   // 서비스 핸들
	DWORD dwInfoLevel,    // 조회할 정보 수준
	LPBYTE lpBuffer,      // 정보를 저장할 버퍼
	DWORD cbBufSize,      // 버퍼 크기
	LPDWORD pcbBytesNeeded // 필요한 바이트 크기
);

첫 번째 인수는 서비스에 대한 핸들이며 OpenService 함수나 CreateService 함수로 얻은 핸들을 전달한다. SERVICE_QUERY_CONFIG 액세스 권한이 필요하다.

두 번째 인수는 조회할 정보를 지정하는데 다음 값들 중 하나일 수 있다.
2. SERVICE_CONFIG_DESCRIPTION (1): 서비스의 설명을 가져온다. 반환되는 데이터는 SERVICE_DESCRIPTION 구조체이다.
3. SERVICE_CONFIG_FAILURE_ACTIONS (2): 서비스가 실패했을 때 수행할 작업을 가져온다. 반환되는 데이터는 SERVICE_FAILURE_ACTIONS 구조체이다.
1. ERVICE_CONFIG_DELAYED_AUTO_START_INFO (3) : 서비스가 지연 자동 시작을 지원하는지 여부를 가져온다. 반환된 데이터는 SERVICE_DELAYED_AUTO_START_INFO 구조체이다.
4. SERVICE_CONFIG_FAILURE_ACTIONS_FLAG (4): 서비스 실패 시 수행할 작업을 활성화할지 여부를 가져온다. 반환되는 데이터는 SERVICE_FAILURE_ACTIONS_FLAG 구조체이다. 
8. SERVICE_CONFIG_SERVICE_SID_INFO (5): 서비스의 SID(Security Identifier) 정보를 가져온다. 반환되는 데이터는 SERVICE_SID_INFO 구조체이다.
7. SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO (6) : 서비스가 필요로 하는 권한 목록을 가져온다. 반환되는 데이터는 SERVICE_REQUIRED_PRIVILEGES_INFO 구조체이다.
6. SERVICE_CONFIG_PRESHUTDOWN_INFO (7): 서비스가 종료되기 전에 수행할 작업을 가져온다. 반환되는 데이터는 SERVICE_PRESHUTDOWN_INFO 구조체이다.
9. SERVICE_CONFIG_TRIGGER_INFO (8): 서비스가 특정 이벤트에 의해 시작될 수 있는 트리거 정보를 가져온다. 반환되는 데이터는 SERVICE_TRIGGER_INFO 구조체이다.
5. SERVICE_CONFIG_PREFERRED_NODE (9): 서비스가 실행될 선호 노드 정보를 가져온다. 반환되는 데이터는 SERVICE_PREFFERED_NODE_INFO 구조체이다.
10. SERVICE_CONFIG_LAUNCH_PROTECTED (12): 서비스가 보호된 실행 모드에서 실행되는지 여부를 가져온다. 반환되는 데이터는 SERVICE_LAUNCH_PROTECTED_INFO 구조체이다.

세 번째 인수는 서비스 구성 정보를 받아올 포인터를 전달하면 된다. 이 데이터 형식은 두 번째 인수의 값에 따라 달라지며 최대 크기는 8KB이다. 필요한 크기를 판별하려면 NULL을 지정하고 cbBufSize에 0을 지정한다. GetLastError 함수의 반환 값이 ERROR_INSUFFICIENT_BUFFER이면 pcbBytesNeeded 인수로 필요한 버퍼의 크기가 전달된다.

네 번째 인수는 버퍼의 크기(바이트)이다.
다섯 번째 인수는 함수가 ERROR_INSUFFICIENT_BUFFER로 실패하는 경우에만 값이 전달된다.

함수가 성공하면 0이 아닌 값이 리턴되며 실패시 0이 반환된다.
다음 오류 코드가 발생할 수 있다.

1. ERROR_ACCESS_DENIED: 핸들에 SERVICE_QUERY_CONFIG 액세스 권한이 없다.
2. ERROR_INSUFFICIENT_BUFFER: lpBuffer 버퍼에 맞는 것보다 더 많은 서비스 구성 정보가 있다. 모든 정보를 가져오는 데 필요한 바이트 수는 pcbBytesNeeded로 반환된다. lpBuffer에는 아무 것도 기록되지 않는다.
3. ERROR_INVALID_HANDLE: 지정된 핸들이 잘못되었다.

여기까지 주요 함수를 알아봤는데 사실 온전히 이해하려면 Windows의 보안에 관한 내용을 어느정도 알고있어야 한다.
진짜 마지막으로 ENUM_SERVICE_STATUS_PROCESS 구조체 타입에 대해 알아보자.

원형은 다음과 같다.
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
	LPWSTR                 lpServiceName;
	LPWSTR                 lpDisplayName;
	SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;

세 번째 멤버 변수도 구조체인데 이 구조체의 원형은 다음과 같다.

typedef struct _SERVICE_STATUS_PROCESS {
	DWORD dwServiceType;
	DWORD dwCurrentState;
	DWORD dwControlsAccepted;
	DWORD dwWin32ExitCode;
	DWORD dwServiceSpecificExitCode;
	DWORD dwCheckPoint;
	DWORD dwWaitHint;
	DWORD dwProcessId;
	DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;

Windows 서비스의 프로세스 상태 정보가 저장되는 구조체인데 ControlServiceEx, EnumServiceStatusEx, NotifyServiceStatusChange, QueryServiceStatusEx 등의 함수에서 사용된다.
각각의 멤버 변수를 간단히 정리해보면 다음과 같다.

1. dwServiceType : 서비스의 유형 (예: 파일 시스템 드라이버, 디바이스 드라이버, 독립 실행형 프로세스 등)
2. dwCurrentState : 서비스의 현재 상태 (예: 실행 중, 중지됨, 일시 중지됨 등)
3. dwControlsAccepted : 서비스가 수락하는 제어 코드
4. dwWin32ExitCode : 서비스가 종료될 때 반환하는 Win32 오류 코드
5. dwServiceSpecificExitCode : 서비스가 종료될 때 반환하는 서비스별 오류 코드
6. dwCheckPoint : 긴 작업 중 진행 상태를 나타내는 값
7. dwWaitHint : 서비스가 다음 상태로 변경되기까지 예상되는 시간
8. dwProcessId : 서비스가 실행 중인 프로세스의 ID
9. dwServiceFlags : 추가적인 서비스 속성을 나타내는 플래그

첫 번째 멤버 변수는 서비스 유형인데 다음 값 중 하나일 수 있다.
1. SERVICE_FILE_SYSTEM_DRIVER (0x00000002): 서비스 유형이 파일 시스템 드라이버이다.
2. SERVICE_KERNEL_DRIVER (0x00000001): 장치 드라이버 서비스이다.
3. SERVICE_WIN32_OWN_PROCESS (0x00000010): 서비스는 자체 프로세스에서 실행된다.
4. SERVICE_WIN32_SHARE_PROCESS (0x00000020): 다른 서비스와 프로세스를 공유한다.

여기서 3번과 4번 서비스 유형이면서 LocalSystem 계정의 컨텍스트에서 실행되는 서비스일 경우 추가 유형이 생긴다.
5. SERVICE_INTERACTIVE_PROCESS : 서비스가 데스크톱과 상호 작용할 수 있다. 대화형 서비스일 경우 해당되는데 일반적이지 않다.

두 번째 멤버 변수는 서비스의 현재 상태를 말하는데 다음 값 중 하나일 수 있다.
1. SERVICE_CONTINUE_PENDING (0x00000005): 서비스가 곧 계속될 것이다.
2. SERVICE_PAUSE_PENDING (0x00000006): 서비스가 일시 중지되고 있다.
3. SERVICE_PAUSED (0x00000007): 서비스가 일시 중지되었다.
4. SERVICE_RUNNING (0x00000004): 서비스가 실행 중이다.
5. SERVICE_START_PENDING (0x00000002): 서비스가 시작되고 있다.
6. SERVICE_STOP_PENDING (0x00000003): 서비스가 중지되고 있다.
7. SERVICE_STOPPED (0x00000001): 서비스가 중지되었다.

이와 관련된 내용은 시스템과 서비스 프로그램을 연구할 때 이미 배운 내용이다.
관련 내용을 잘 모른다면 서비스 프로그램에 대해 먼저 알아보고 오자.

세 번째 멤버 변수는 서비스가 현재 수락할 수 있는 제어 코드(controls)를 나타내는데 서비스가 특정 상태에 있을 때 어떤 작업을 수행할 수 있는지를 정의한다.
제어코드는 다음과 같다.

1. SERVICE_ACCEPT_NETBINDCHANGE (0x00000010): 서비스를 중지하거나 다시 시작하지 않고 네트워크 바인딩 변경을 감지할 수 있다. 이 제어 코드를 사용하면 서비스에서 SERVICE_CONTROL_NETBINDADD, SERVICE_CONTROL_NETBINDREMOVE, SERVICE_CONTROL_NETBINDENABLE 및 SERVICE_CONTROL_NETBINDDISABLE 알림을 받을 수 있다.
2. SERVICE_ACCEPT_PARAMCHANGE (0x00000008): 서비스를 중지하거나 다시 시작하지 않고 구성 변경(parameter change) 요청을 수락할 수 있다. 즉, 새로운 인수를 다시 받아들인다. 이 제어 코드를 사용하면 서비스에서 SERVICE_CONTROL_PARAMCHANGE 알림을 받을 수 있다.
3. SERVICE_ACCEPT_PAUSE_CONTINUE (0x00000002): 서비스가 일시 중지(pause) 및 계속(continue) 요청을 수락할 수 있다. 이 제어 코드를 사용하면 서비스에서 SERVICE_CONTROL_PAUSE 및 SERVICE_CONTROL_CONTINUE 알림을 받을 수 있다.
4. SERVICE_ACCEPT_PRESHUTDOWN (0x00000100): 서비스는 사전 종료 작업을 수행할 수 있다. 즉, 시스템 종료 전에 미리 알림을 받을 수 있다. 이 제어 코드를 사용하면 서비스에서 SERVICE_CONTROL_PRESHUTDOWN 알림을 받을 수 있다. ControlService 및 ControlServiceEx 는 이 알림을 보낼 수 없으며 시스템만 보낼 수 있다. Windows Server 2003 및 Windows XP: 이 값은 지원되지 않는다.
5.SERVICE_ACCEPT_SHUTDOWN (0x00000004): 시스템 종료 시 서비스가 알림을 받을 수 있다. 이 제어 코드를 사용하면 서비스가 SERVICE_CONTROL_SHUTDOWN 알림을 받을 수 있다. ControlService 및 ControlServiceEx 는 이 알림을 보낼 수 없으며 시스템만 보낼 수 있다.
6. SERVICE_ACCEPT_STOP (0x00000001): 서비스가 중지(stop) 요청을 수락할 수 있다. 이 제어 코드를 사용하면 서비스에서 SERVICE_CONTROL_STOP 알림을 받을 수 있다.
7. SERVICE_ACCEPT_HARDWAREPROFILECHANGE (0x00000020): 하드웨어 프로필 변경을 감지할 수 있다. 컴퓨터의 하드웨어 프로필이 변경되면 서비스에 알림이 표시된다. 시스템에서 서비스에 SERVICE_CONTROL_HARDWAREPROFILECHANGE 알림을 보낼 수 있다.
8. SERVICE_ACCEPT_POWEREVENT (0x00000040): 전원 관리 이벤트를 감지할 수 있다. 시스템에서 서비스에 SERVICE_CONTROL_POWEREVENT 알림을 보낼 수 있다.
9. SERVICE_ACCEPT_SESSIONCHANGE (0x00000080): 세션 변경 이벤트를 감지할 수 있다. 컴퓨터의 세션 상태가 변경되면 서비스에 알림이 전송되며 시스템이 서비스에 SERVICE_CONTROL_SESSIONCHANGE 알림을 보낼 수 있다.
10. SERVICE_ACCEPT_TIMECHANGE : 시스템 시간 변경을 감지할 수 있다.
11. SERVICE_ACCEPT_TRIGGEREVENT: 트리거 이벤트를 감지할 수 있다.

네 번째 멤버 변수는 서비스가 시작되거나 중단될 때 발생하는 오류가 저장된다.
이를 사용하려면 변수의 값을 ERROR_SERVICE_SPECIFIC_ERROR로 설정하여 dwServiceSpecificExitCode 멤버에 오류 코드가 포함되어 있음을 나타내야 하며,
서비스는 실행 중일 때와 정상적으로 종료될 때 이 값을 NO_ERROR로 설정해야 한다.

다섯 번째 멤버 변수 dwServiceSpecificExitCode는 서비스가 직접 반환하는 서비스별 오류 코드이다. 네 번째 멤버 변수를 ERROR_SERVICE_SPECIFIC_ERROR로 설정하지 않으면 무시된다.

여섯 번째 멤버 변수는 서비스가 긴 작업을 수행하는 동안 진행 상태를 나타내는 값이다.
서비스가 SERVICE_START_PENDING, SERVICE_STOP_PENDING, SERVICE_PAUSE_PENDING, SERVICE_CONTINUE_PENDING 상태일 때 이 값을 설정해야 하는데 이러한 경우가 아니라면 항상 0이어야 한다.

일곱 번째 멤버 변수는 서비스가 다음 상태로 변경되기까지 예상되는 시간을 밀리초 단위로 나타낸 것이다.
이 값은 서비스가 SERVICE_START_PENDING, SERVICE_STOP_PENDING, SERVICE_PAUSE_PENDING, SERVICE_CONTINUE_PENDING 상태일 때 설정한다.
예를 들어, 서비스가 시작 중(SERVICE_START_PENDING)일 때 dwWaitHint를 설정하여 SCM이 서비스가 완료될 때까지 기다릴 시간을 알 수 있도록 한다.
이 값은 dwCheckPoint, 즉 여섯 번째 멤버 변수와 함께 사용한다.

여덟 번째 멤버 변수는 서비스의 프로세스 식별자인데 서비스의 유형이 SERVICE_WIN32_OWN_PROCESS일 경우에만 제대로 조사된다.
SERVICE_WIN32_SHARE_PROCESS, 즉 공유 프로세스로 실행된 경우 이 값은 0일 수 있다.

마지막 멤버 변수는 플래그 값인데 서비스의 추가적인 속성을 나타낸다.
1. SERVICE_RUNS_IN_SYSTEM_PROCESS (0x00000001): 서비스가 시스템 프로세스에서 실행됨을 나타낸다. 즉, 항상 실행되어야 하는 중요 프로세스의 서비스라는 뜻이다.
2. 0: 서비스가 시스템 프로세스가 아닌 프로세스에서 실행 중이거나 실행되고 있지 않음을 나타낸다. 서비스가 시스템 프로세스가 아닌 프로세스에서 실행 중인 경우 dwProcessId는 0이 아닌 값이며, 서비스가 실행되고 있지 않으면 dwProcessId가 0으로 지정된다.

ENUM_SERVICE_STATUS_PROCESS 구조체는 위 구조체에 서비스 이름과 표시되는 이름을 가리키는 포인터만 추가된 것이다.
첫 번째 멤버 변수는 서비스의 이름이며 최대 길이가 256자로 제한되어 있다. 대소문자를 구분하지 않으며 '/', '\', ',', ' '와 같은 문자는 사용될 수 없다.
두 번째 멤버 변수는 제어판의 서비스와 같은 서비스 제어 프로그램에서 식별하는 표시 이름이다. 이 역시 최대 256자로 제한되며 SCM에 의해 관리된다. 역시 대소문자를 구분하지 않는다.

